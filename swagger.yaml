openapi: 3.0.3
info:
  title: Travan – RestFul + GraphQL
  version: '1.0'
  description: API de gerenciamento de usuários, motoristas e viagens.
servers:
  - url: http://localhost:2005
    description: Servidor local

tags:
  - name: Usuários & Motoristas
    description: Operações relacionadas a usuários e motoristas (REST)
  - name: GraphQL - Viagens
    description: Endpoint GraphQL para gerenciamento de viagens


paths:
  /api/usuarios:
    get:
      tags: [Usuários & Motoristas]
      summary: Listar todos os usuários
      operationId: findUsers
      responses:
        '200':
          description: Lista de usuários
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
    post:
      tags: [Usuários & Motoristas]
      summary: Criar novo usuário
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '201':
          description: Usuário criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'

  /api/usuarios/{id}:
    get:
      tags: [Usuários & Motoristas]
      summary: Buscar usuário por ID
      operationId: findById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
    put:
      tags: [Usuários & Motoristas]
      summary: Atualizar usuário
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '200':
          description: Usuário atualizado

  /api/usuarios/motorista/{id}:
    put:
      tags: [Usuários & Motoristas]
      summary: Atualizar motorista (via usuário)
      operationId: updateMotoristaById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MotoristaUpdateInput'
      responses:
        '200':
          description: Motorista atualizado

  /api/usuarios/tipo/{tipo}:
    get:
      tags: [Usuários & Motoristas]
      summary: Buscar usuários por tipo
      operationId: findByType
      parameters:
        - name: tipo
          in: path
          required: true
          schema:
            type: string
            enum: [passageiro, motorista]
      responses:
        '200':
          description: Lista de usuários filtrados

  /api/usuarios/login:
    post:
      tags: [Usuários & Motoristas]
      summary: Login de usuário
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                senha:
                  type: string
              required:
                - email
                - senha
      responses:
        '200':
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /graphql:
    post:
      tags: [GraphQL - Viagens]
      summary: Endpoint GraphQL para viagens
      description: Execute queries/mutations GraphQL relacionadas a viagens.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  example: |
                    mutation {
                      createViagem(
                        data: "01/01/2024",
                        horas: 14,
                        minutos: 30,
                        origem: "São Paulo",
                        destino: "Rio de Janeiro",
                        status: "pendente"
                      ) {
                        viagem { id }
                        error
                      }
                    }
      responses:
        '200':
          description: Resposta GraphQL
          content:
            application/json:
              schema: {}

components:
  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: string
          description: ID único do usuário
        nome:
          type: string
          description: Nome completo do usuário
        email:
          type: string
          format: email
          description: E-mail único do usuário
        senha:
          type: string
          description: Senha criptografada
        tipo:
          type: string
          enum: [passageiro, motorista]
          default: passageiro
        viagensId:
          type: array
          items:
            type: string
          description: IDs das viagens associadas
        avaliacoesId:
          type: array
          items:
            type: string
          description: IDs das avaliações associadas
      required:
        - id
        - nome
        - email
        - senha

    UsuarioInput:
      type: object
      properties:
        nome:
          type: string
        email:
          type: string
          format: email
        senha:
          type: string
        tipo:
          type: string
          enum: [passageiro, motorista]
      required:
        - nome
        - email
        - senha

    MotoristaUpdateInput:
      type: object
      properties:
        veiculo:
          $ref: '#/components/schemas/Veiculo'
        autenticado:
          type: boolean

    Veiculo:
      type: object
      properties:
        ano:
          type: integer
        cor:
          type: string
        marca:
          type: string
        modelo:
          type: string
        placa:
          type: string
      required:
        - ano
        - cor
        - marca
        - modelo
        - placa

    Viagem:
      type: object
      properties:
        id:
          type: string
        motoristaId:
          type: string
        passageirosId:
          type: array
          items:
            type: string
        data:
          type: string
        hora:
          type: object
          properties:
            horas:
              type: integer
              minimum: 0
              maximum: 23
            minutos:
              type: integer
              minimum: 0
              maximum: 59
          required:
            - horas
            - minutos
        origem:
          type: string
        destino:
          type: string
        status:
          type: string
          enum: [confirmada, concluida, pendente]
      required:
        - id
        - data
        - hora
        - origem
        - destino